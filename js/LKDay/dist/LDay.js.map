{"version":3,"file":"LDay.js","mappings":"CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,IACQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,GAAIH,GACe,iBAAZC,QACdA,QAAc,KAAID,IAElBD,EAAW,KAAIC,GAChB,CATD,CASGK,MAAM,I,gDCTT,aAYE,WAAYC,GACVC,KAAKD,KAAOA,EAAO,IAAIE,KAAKF,GAAQ,IAAIE,KACxCD,KAAKE,GAAKF,KAAKD,KAAKI,cACpBH,KAAKI,GAAKJ,KAAKD,KAAKM,WAAa,EACjCL,KAAKM,GAAKN,KAAKD,KAAKQ,UACpBP,KAAKQ,GAAKR,KAAKD,KAAKU,SACpBT,KAAKU,GAAKV,KAAKD,KAAKY,WACpBX,KAAKY,GAAKZ,KAAKD,KAAKc,aACpBb,KAAKc,GAAKd,KAAKD,KAAKgB,aACpBf,KAAKgB,GAAKhB,KAAKD,KAAKkB,UACpBjB,KAAKkB,GAAKlB,KAAKmB,QACjB,CAmFF,OAhFE,YAAAA,OAAA,WACE,OAAQnB,KAAKE,GAAK,GAAM,GAAiB,IAAZF,KAAKE,IAAaF,KAAKE,GAAK,KAAQ,CACnE,EAGA,YAAAkB,OAAA,SAAOC,GACL,YADK,IAAAA,IAAAA,EAAA,cAEE,eADCA,EAEG,UAAGrB,KAAKE,GAAGoB,WAAWC,SAAS,EAAG,KAAI,YAAIvB,KAAKI,GACnDkB,WACAC,SAAS,EAAG,KAAI,YAAIvB,KAAKM,GAAGgB,WAAWC,SAAS,EAAG,MAE/C,UAAGvB,KAAKE,GAAE,YAAIF,KAAKI,GAAE,YAAIJ,KAAKM,GAG3C,EAGA,YAAAkB,OAAA,SAAOC,GACL,OAAOzB,KAAKgB,GAAKS,EAAUT,IAAO,CACpC,EAGA,YAAAU,IAAA,WACE,OAAmB,IAAZ1B,KAAKQ,GAAW,EAAIR,KAAKQ,EAClC,EAGA,YAAAmB,UAAA,WAGE,IAFA,IAAIC,EAAM5B,KAAKM,GACTuB,EAAS,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IACnDC,EAAI,EAAGA,EAAI9B,KAAKI,GAAK,EAAG0B,IAC/BF,GAAOC,EAAOC,GAKhB,OAHI9B,KAAKkB,IACPU,IAEKA,CACT,EAGA,YAAAG,KAAA,WACE,IAAMC,EAAW,IAAI/B,KAAK,UAAGD,KAAKE,GAAE,SAC9B+B,EAAOjC,KAAKgB,GAAKgB,EAASf,UAC1BiB,EAAOC,KAAKC,KAAKH,EAAO,OAC9B,OAAOE,KAAKC,KAAKF,EAAO,GAAK,CAC/B,EAGA,YAAAG,IAAA,SAAIC,GAEF,OADUA,GAAM,IAEd,IAAK,IACL,IAAK,OACH,OAAOtC,KAAKE,GACd,IAAK,IACL,IAAK,QACH,OAAOF,KAAKI,GACd,IAAK,IACL,IAAK,OACH,OAAOJ,KAAKM,GACd,IAAK,IACL,IAAK,OACH,OAAON,KAAKU,GACd,IAAK,IACL,IAAK,SACH,OAAOV,KAAKY,GACd,IAAK,IACL,IAAK,SACH,OAAOZ,KAAKc,GACd,IAAK,KACL,IAAK,cACH,OAAOd,KAAKgB,GACd,IAAK,IACL,IAAK,MACH,OAAOhB,KAAKQ,GACd,QACE,OAAOR,KAAKD,KAElB,EACF,EA1GA,GA6GA,mBAA6BA,GAC3B,OAAO,IAAIwC,EAAIxC,EACjB,C","sources":["webpack://LDay/webpack/universalModuleDefinition","webpack://LDay/./src/LDay.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"LDay\"] = factory();\n\telse\n\t\troot[\"LDay\"] = factory();\n})(self, () => {\nreturn ","class Day {\r\n  private date: Date;\r\n  private $Y: number;\r\n  private $M: number;\r\n  private $D: number;\r\n  private $W: number;\r\n  private $h: number;\r\n  private $m: number;\r\n  private $s: number;\r\n  private $t: number;\r\n  private $L: boolean;\r\n\r\n  constructor(date?: string) {\r\n    this.date = date ? new Date(date) : new Date();\r\n    this.$Y = this.date.getFullYear();\r\n    this.$M = this.date.getMonth() + 1;\r\n    this.$D = this.date.getDate();\r\n    this.$W = this.date.getDay();\r\n    this.$h = this.date.getHours();\r\n    this.$m = this.date.getMinutes();\r\n    this.$s = this.date.getSeconds();\r\n    this.$t = this.date.getTime();\r\n    this.$L = this.isLeap();\r\n  }\r\n\r\n  /* 判断是否是闰年 */\r\n  isLeap() {\r\n    return (this.$Y % 4 === 0 && this.$Y !== 0) || this.$Y % 400 === 0;\r\n  }\r\n\r\n  /* 格式化 */\r\n  format(pattern: string = \"YYYY-MM-DD\") {\r\n    switch (pattern) {\r\n      case \"YYYY-MM-DD\":\r\n        return `${this.$Y.toString().padStart(4, \"0\")}-${this.$M\r\n          .toString()\r\n          .padStart(2, \"0\")}-${this.$D.toString().padStart(2, \"0\")}`;\r\n      default: {\r\n        return `${this.$Y}-${this.$M}-${this.$D}`;\r\n      }\r\n    }\r\n  }\r\n\r\n  /* 是否相同时间 */\r\n  isSame(otherDate: Day) {\r\n    return this.$t - otherDate.$t === 0;\r\n  }\r\n\r\n  /* 获取是一周第几天 */\r\n  day() {\r\n    return this.$W === 0 ? 7 : this.$W;\r\n  }\r\n\r\n  /* 一年内第几天 */\r\n  dayOfYear() {\r\n    let num = this.$D;\r\n    const Months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\r\n    for (let i = 0; i < this.$M - 1; i++) {\r\n      num += Months[i];\r\n    }\r\n    if (this.$L) {\r\n      num++;\r\n    }\r\n    return num;\r\n  }\r\n\r\n  /* 一年内第几周 */\r\n  week() {\r\n    const firstday = new Date(`${this.$Y} 1 1`);\r\n    const diff = this.$t - firstday.getTime();\r\n    const days = Math.ceil(diff / 86400000);\r\n    return Math.ceil(days / 7) + 1;\r\n  }\r\n\r\n  /* 获取数据 */\r\n  get(id?: string) {\r\n    let key = id || \"\";\r\n    switch (key) {\r\n      case \"y\":\r\n      case \"year\":\r\n        return this.$Y;\r\n      case \"M\":\r\n      case \"month\":\r\n        return this.$M;\r\n      case \"d\":\r\n      case \"date\":\r\n        return this.$D;\r\n      case \"h\":\r\n      case \"hour\":\r\n        return this.$h;\r\n      case \"m\":\r\n      case \"minute\":\r\n        return this.$m;\r\n      case \"s\":\r\n      case \"second\":\r\n        return this.$s;\r\n      case \"ms\":\r\n      case \"millisecond\":\r\n        return this.$t;\r\n      case \"w\":\r\n      case \"day\":\r\n        return this.$W;\r\n      default:\r\n        return this.date;\r\n    }\r\n  }\r\n}\r\n\r\n/* 构造函数 */\r\nexport default function Lday(date?: string) {\r\n  return new Day(date);\r\n}\r\n"],"names":["root","factory","exports","module","define","amd","self","date","this","Date","$Y","getFullYear","$M","getMonth","$D","getDate","$W","getDay","$h","getHours","$m","getMinutes","$s","getSeconds","$t","getTime","$L","isLeap","format","pattern","toString","padStart","isSame","otherDate","day","dayOfYear","num","Months","i","week","firstday","diff","days","Math","ceil","get","id","Day"],"sourceRoot":""}